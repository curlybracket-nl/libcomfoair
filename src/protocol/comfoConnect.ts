// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "comfoConnect.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GatewayDiscovery
 */
export interface GatewayDiscovery {
    /**
     * @generated from protobuf field: GatewayDiscovery.Request request = 1;
     */
    request?: GatewayDiscovery_Request;
    /**
     * @generated from protobuf field: GatewayDiscovery.Response response = 2;
     */
    response?: GatewayDiscovery_Response;
}
/**
 * @generated from protobuf message GatewayDiscovery.Request
 */
export interface GatewayDiscovery_Request {
}
/**
 * @generated from protobuf message GatewayDiscovery.Response
 */
export interface GatewayDiscovery_Response {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: bytes uuid = 2;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: uint32 version = 3;
     */
    version: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GatewayDiscovery$Type extends MessageType<GatewayDiscovery> {
    constructor() {
        super("GatewayDiscovery", [
            { no: 1, name: "request", kind: "message", T: () => GatewayDiscovery_Request },
            { no: 2, name: "response", kind: "message", T: () => GatewayDiscovery_Response }
        ]);
    }
    create(value?: PartialMessage<GatewayDiscovery>): GatewayDiscovery {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GatewayDiscovery>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GatewayDiscovery): GatewayDiscovery {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GatewayDiscovery.Request request */ 1:
                    message.request = GatewayDiscovery_Request.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* GatewayDiscovery.Response response */ 2:
                    message.response = GatewayDiscovery_Response.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GatewayDiscovery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GatewayDiscovery.Request request = 1; */
        if (message.request)
            GatewayDiscovery_Request.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GatewayDiscovery.Response response = 2; */
        if (message.response)
            GatewayDiscovery_Response.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GatewayDiscovery
 */
export const GatewayDiscovery = new GatewayDiscovery$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GatewayDiscovery_Request$Type extends MessageType<GatewayDiscovery_Request> {
    constructor() {
        super("GatewayDiscovery.Request", []);
    }
    create(value?: PartialMessage<GatewayDiscovery_Request>): GatewayDiscovery_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GatewayDiscovery_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GatewayDiscovery_Request): GatewayDiscovery_Request {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GatewayDiscovery_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GatewayDiscovery.Request
 */
export const GatewayDiscovery_Request = new GatewayDiscovery_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GatewayDiscovery_Response$Type extends MessageType<GatewayDiscovery_Response> {
    constructor() {
        super("GatewayDiscovery.Response", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GatewayDiscovery_Response>): GatewayDiscovery_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.uuid = new Uint8Array(0);
        message.version = 0;
        if (value !== undefined)
            reflectionMergePartial<GatewayDiscovery_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GatewayDiscovery_Response): GatewayDiscovery_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* bytes uuid */ 2:
                    message.uuid = reader.bytes();
                    break;
                case /* uint32 version */ 3:
                    message.version = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GatewayDiscovery_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* bytes uuid = 2; */
        if (message.uuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.uuid);
        /* uint32 version = 3; */
        if (message.version !== 0)
            writer.tag(3, WireType.Varint).uint32(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GatewayDiscovery.Response
 */
export const GatewayDiscovery_Response = new GatewayDiscovery_Response$Type();
